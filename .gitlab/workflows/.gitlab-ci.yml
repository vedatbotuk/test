stages:
  - validate
  - build
  - prod
  - prepare
  - deploy
  - cleanup

# Only dev branch can be merged to main branch
# Check if merging to main branch possible
# ############################################
restrict_pr_to_main:
  stage: validate
  rules:
  when: always # Ensure this job is never skipped
  only:
    - merge_requests
  script:
    - >
      if [[ "$CI_MERGE_REQUEST_TARGET_BRANCH_NAME" == "main" && "$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME" != "dev" ]];
      then
      echo "Pull requests to the main branch are only allowed from the dev branch.";
      exit 1;
      fi

# Pull request can be have some todos
# Check before merging, if all todos is done
############################################
check_pr_description:
  stage: validate
  image: registry.gitlab.botuk.de/vedatbotuk/botuk_zigbee
  when: always # Ensure this job is never skipped
  only:
    - merge_requests
  script:
    # Fetch the PR description from the GitLab API
    - API_URL="$CI_API_V4_URL/projects/$CI_PROJECT_ID/merge_requests/$CI_MERGE_REQUEST_IID"
    - 'echo "Fetching PR description from: $API_URL"'

    # Fetch the PR details using curl
    - >
      API_RESPONSE=$(curl
      --silent
      --header
      "JOB-TOKEN:${CI_JOB_TOKEN}"
      "$API_URL")
    
    # - echo $API_RESPONSE

    # Extract the description field
    - MR_DESCRIPTION=$(echo "$API_RESPONSE" | jq -r '.description')
    - 'echo "PR Description: $MR_DESCRIPTION"'

    # Check if there are any unchecked to-do items in the description
    - >
      if echo "$MR_DESCRIPTION" | grep -q '\- \[ \]';
      then
      echo "Error: Found unchecked to-do items in PR description.";
      exit 1;
      else
      echo "No unchecked to-do items found in PR description.";
      fi

# Firmwar version and ota version
# shoulc be updated befor merging
# to main branch
#################################
check_firmware_version:
  stage: validate
  image: registry.gitlab.botuk.de/vedatbotuk/botuk_zigbee
  when: always # Ensure this job is never skipped
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"'
      when: always
  script:
    - git fetch origin main:main

    # Extract values from the main branch
    - MAIN_FIRMWARE_VERSION=$(git show main:settings.conf | grep "^FIRMWARE_VERSION=" | cut -d '=' -f 2)
    - MAIN_VERSION=$(git show main:settings.conf | grep "^VERSION=" | cut -d '=' -f 2)
    - echo "main_firmware_version=$MAIN_FIRMWARE_VERSION"
    - echo "main_version=$MAIN_VERSION"

    # Extract values from the current (source) branch (dev or other)
    - DEV_FIRMWARE_VERSION=$(grep "^FIRMWARE_VERSION=" settings.conf | cut -d '=' -f 2)
    - DEV_VERSION=$(grep "^VERSION=" settings.conf | cut -d '=' -f 2)
    - echo "dev_firmware_version=$DEV_FIRMWARE_VERSION"
    - echo "dev_version=$DEV_VERSION"

    # Compare the versions from the main and dev branches
    - >
      if [[ "$MAIN_FIRMWARE_VERSION" == "$DEV_FIRMWARE_VERSION" ]] || [[ "$MAIN_VERSION" == "$DEV_VERSION" ]];
      then
      echo "Error: FIRMWARE_VERSION or VERSION have not changed.";
      exit 1;
      else
      echo "Success: FIRMWARE_VERSION or VERSION has changed.";
      fi

# Building dev before merge to dev branch
# This comes from features branch
# ########################################
build_dev:
  stage: build
  image: registry.gitlab.botuk.de/vedatbotuk/botuk_zigbee
  rules:
  - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "dev"'
    when: always
  script:
    - echo "Repository already checked out by GitLab Runner."
    - source $HOME/esp/esp-idf/export.sh
    - idf.py set-target esp32h2
    - idf.py build

# Building prod before merging to main branch
# ###########################################
build_prod:
  stage: prod
  image: registry.gitlab.botuk.de/vedatbotuk/botuk_zigbee
  rules:
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"'
      when: always
  script:
    - echo "Repository checked out by GitLab Runner"
    - source $HOME/esp/esp-idf/export.sh
    - chmod +x ./scripts/prod.sh
    - ./scripts/prod.sh
  artifacts:
    paths:
      - ./ota/*
    expire_in: 1 hour

.deploy_rule: &deploy_rule
    - if: $CI_COMMIT_TAG
      when: never
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: always


# Deploying after merging to main branch
# ######################################
prepare_job:
  stage: prepare
  image: registry.gitlab.botuk.de/vedatbotuk/botuk_zigbee
  rules: *deploy_rule
  script:
    # Load settings from settings.conf
    - echo "Loading FIRMWARE_VERSION and VERSION from settings.conf"
    - source settings.conf
    - export FIRMWARE_VERSION
    - export VERSION
    - echo "FIRMWARE_VERSION=$FIRMWARE_VERSION" >> variables.env
    - echo "VERSION=$VERSION"  >> variables.env

    # Set up version tag based on firmware version and version
    - echo "TAG=${FIRMWARE_VERSION}_${VERSION}" >> variables.env
  artifacts:
    reports:
      dotenv: variables.env

deploy:
  variables:
    PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/$FIRMWARE_VERSION/1.0.0"

  stage: deploy
  image: registry.gitlab.botuk.de/vedatbotuk/botuk_zigbee
  needs:
    - job: prepare_job
      artifacts: true
  rules: *deploy_rule
  script:
    # Run the prod script
    # TODO #######################
    # Activate following two lines
    # TODO #######################
    # - chmod +x ./scripts/prod.sh
    # - ./scripts/prod.sh
    # DEBUG LINES
    # - mkdir ota
    # - touch ota/botuk_index1.json
    # - touch ota/botuk_index2.json
    # - touch ota/botuk_index3.json
    # - pwd
    # - ls /builds/vedatbotuk/botuk_zigbee
    # - ls /builds/vedatbotuk/botuk_zigbee/ota
    # - ls ota

    # Create and push tag
    - git config user.name "gitlab-ci-bot"
    - git config user.email "gitlab-ci-bot@gitlab.botuk.de"

    # Update the remote URL to use the token
    - git tag $TAG
    - git push https://${CI_PROJECT_NAME}:${TEST_TOKEN}@gitlab.botuk.de/vedatbotuk/botuk_zigbee_workflow_changes.git $TAG


    # Generate Release Notes from Commits Since Last Tag
    - LATEST_TAG=$(git describe --tags --abbrev=0)
    - COMMITS=$(git log $LATEST_TAG..HEAD --pretty=format:"%s")
    - RELEASE_NOTES="## Release Notes\n"
    - >
      if [[ -z "$COMMITS" ]]; then RELEASE_NOTES="No new changes since last tag."; 
      else RELEASE_NOTES=""; for COMMIT in $COMMITS; do RELEASE_NOTES="${RELEASE_NOTES}\n- $COMMIT"; done; 
      fi
    - echo "$RELEASE_NOTES" > release_notes.txt

    - cat release_notes.txt
    - echo "RELEASE_NOTES=TEST" >> variables.env

    # Generate dynamic assets list for all files in the ota directory
    - echo "Generating release assets..."
    - >
      cd ota; assets="["; for file in *; do if [[ -f "$file" ]]; then file_name=$(basename "$file");
      assets="$assets
      {\"name\": \"$file_name\",
      \"url\": \"${PACKAGE_REGISTRY_URL}/$file\",
      \"link_type\":\"other\"
      },";
      echo "${PACKAGE_REGISTRY_URL}/$file";
      ls -l;
      curl --header "JOB-TOKEN:${CI_JOB_TOKEN}" --upload-file $file "${PACKAGE_REGISTRY_URL}/$file";
      fi;
      done;
      assets="${assets%,}]"

    # DEBUG LINES
    # - echo "$assets"

    # Create the release
    - >
      release-cli create --description "$RELEASE_NOTES"
      --tag-name "$TAG"
      --ref "$CI_COMMIT_SHA"
      --assets-link "$assets"
  artifacts:
    paths:
      - ota/*
    expire_in: 1 hour

# Sync README.md and images to Wiki.js
sync_gitlab_wiki_to_wikijs:
  stage: deploy
  image: registry.gitlab.botuk.de/vedatbotuk/botuk_zigbee
  before_script:
    # Set up Git config for fetching the wiki
    - git config --global user.email "ci@example.com"
    - git config --global user.name "GitLab CI/CD"

    # Query for all pages once and build a lookup map
    - declare -A PAGE_MAP
    - >
      RESPONSE=$(curl -s -X POST "https://wiki.botuk.de/graphql" -H "Authorization: Bearer $WIKI_API_TOKEN" -H "Content-Type: application/json" -d '{"query": "query { pages { list { id path } } }"}');
    - echo $RESPONSE

    # Populate the associative array
    - >
      while read -r ID PATH; do PAGE_MAP["$PATH"]=$ID; echo $PATH; done < <(echo "$RESPONSE" | jq -r '.data.pages.list[] | "\(.id) \(.path)"');
    - echo PAGE_MAP[0]

  script:
    # Clone the GitLab wiki repository
    - echo "Cloning the GitLab wiki repository..."
    - git clone https://$CI_JOB_TOKEN:@gitlab.botuk.de/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME.wiki.git

    # Navigate to the cloned wiki repository
    - cd $CI_PROJECT_NAME.wiki

    # Iterate over all .md files in the wiki
    
    # Debug existing page on wiki
    # - >
    #   RESPONSE=$(curl -s -X POST "https://wiki.botuk.de/graphql" -H "Authorization: Bearer $WIKI_API_TOKEN" -H "Content-Type: application/json" -d '{"query": "query GetPageId($path: String!) { pages { single(path: $path) { id } } }","variables": {"path": "'"$FULL_PATH"'"}}');
    #   PAGE_ID=$(echo "$RESPONSE" | jq -r '.data.pages.single.id // empty')
    # - >
    #   RESPONSE=$(curl -s -X POST "https://wiki.botuk.de/graphql" -H "Authorization: Bearer $WIKI_API_TOKEN" -H "Content-Type: application/json" -d '{"query": "query { pages { list { id path } } }"}')
    # - echo ${RESPONSE}
    # - PAGE_PATH="technical/project/botuk_zigbee/home"
    # - PAGE_ID=$(echo "$RESPONSE" | jq -r --arg PAGE_PATH "$PAGE_PATH" '.data.pages.list[] | select(.path == $PAGE_PATH) | .id // empty')
    # - echo ${PAGE_ID}
    # TODO the lines above get the PAGE_ID, this should be deleted.

    # If I create a page id like above, it works. But in for loop it does not work creating varibale page id

    - >
      for PAGE in *.md;
      do
          JSON_CONTENT=$(jq -Rs '.' < "$PAGE");
          PAGE_TITLE=$(basename "$PAGE" .md);
          SUB_PATH=$(echo "$PAGE_TITLE" | sed 's/_/-/g');
          FULL_PATH="/technical/project/botuk_zigbee/$SUB_PATH";
          PAGE_ID=${PAGE_MAP["$FULL_PATH"]};
          # echo $PAGE_ID;
          # If PAGE_ID exists, update the page;
          if [ -n "$PAGE_ID" ];
          then
              echo "Page exists with ID: $PAGE_ID. Updating...";
              curl -s -X POST "https://wiki.botuk.de/graphql" \
              -H "Authorization: Bearer $WIKI_API_TOKEN" \
              -H "Content-Type: application/json" \
              -d '{
                  "query": "mutation UpdatePage($id: Int!, $content: String!, $description: String!, $editor: String!, $isPublished: Boolean!, $isPrivate: Boolean!, $locale: String!, $tags: [String]!, $title: String!) { pages { update(id: $id, content: $content, description: $description, editor: $editor, isPublished: $isPublished, isPrivate: $isPrivate, locale: $locale, tags: $tags, title: $title) { responseResult { succeeded errorCode message } page { id path title content } } } }",
                  "variables": {
                      "id": '$PAGE_ID',
                      "content": '"$JSON_CONTENT"',
                      "description": "Synced from GitLab Wiki",
                      "editor": "code",
                      "isPublished": true,
                      "isPrivate": false,
                      "locale": "en",
                      "tags": ["GitLab", "Sync"],
                      "title": "'"$PAGE_TITLE"'"
                  }
              }';
          else
              echo "Page does not exists, create new page";
              CREATE_RESPONSE=$(curl -s -X POST "https://wiki.botuk.de/graphql" \
              -H "Authorization: Bearer $WIKI_API_TOKEN" \
              -H "Content-Type: application/json" \
              -d '{
                  "query": "mutation CreatePage($content: String!, $description: String!, $editor: String!, $isPublished: Boolean!, $isPrivate: Boolean!, $locale: String!, $path: String!, $tags: [String]!, $title: String!) { pages { create(content: $content, description: $description, editor: $editor, isPublished: $isPublished, isPrivate: $isPrivate, locale: $locale, path: $path, tags: $tags, title: $title) { responseResult { succeeded errorCode message } page { id path title content } } } }",
                  "variables": {
                      "content": '"$JSON_CONTENT"',
                      "description": "Synced from GitLab Wiki",
                      "editor": "code",
                      "isPublished": true,
                      "isPrivate": false,
                      "locale": "en",
                      "path": "'"$FULL_PATH"'",
                      "tags": ["GitLab", "Sync"],
                      "title": "'"$PAGE_TITLE"'"
                  }
              }');
              CREATE_SUCCESS=$(echo "$CREATE_RESPONSE" | jq -r '.data.pages.create.responseResult.succeeded');
              if [ "$CREATE_SUCCESS" != "true" ];
              then
                  ERROR_MSG=$(echo "$CREATE_RESPONSE" | jq -r '.data.pages.create.responseResult.message');
                  echo "Failed to create the page. Error: $ERROR_MSG";
              fi
          fi
      done
    - echo $PAGE_ID  
    - echo "Sync complete!"

  only:
    - main  # Trigger on changes to the main branch

# CLEANUP
# #######
cleanup:
  stage: cleanup
  image: registry.gitlab.botuk.de/vedatbotuk/botuk_zigbee
  script:
    - rm -rf ./*
  only:
    - main
